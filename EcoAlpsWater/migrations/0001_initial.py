# Generated by Django 2.1.7 on 2019-11-06 11:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BiologicalElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.TextField()),
                ('comment', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ControlledVocabulary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DepthType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='DNAExtractionKit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='DrainageBasin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('type', models.CharField(choices=[('Lake', 'L'), ('River', 'R')], max_length=6)),
                ('country', models.CharField(choices=[('Austria', 'A'), ('Switzerland', 'C'), ('France', 'F'), ('Germany', 'D'), ('Italy', 'I'), ('Slovenia', 'S')], max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='EAWUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute', models.TextField(blank=True, null=True)),
                ('institute_short', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EDNAMarker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FieldControlledVocabularyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.TextField()),
                ('controlled_vocabulary_term', models.TextField()),
                ('controlled_vocabulary', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.ControlledVocabulary')),
            ],
        ),
        migrations.CreateModel(
            name='FieldDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.TextField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FTPSampleDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_dirname', models.TextField(unique=True)),
                ('full_dirname', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeographicalPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MixingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NumericalCodeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.TextField()),
                ('code_position', models.IntegerField()),
                ('num_digits', models.IntegerField()),
                ('num_code', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_id', models.TextField(unique=True)),
                ('sample_code', models.TextField(unique=True)),
                ('cap_code', models.TextField(blank=True, null=True)),
                ('sampling_date', models.DateTimeField(auto_now_add=True)),
                ('sampling_depth_min', models.FloatField()),
                ('sampling_depth_max', models.FloatField()),
                ('sampling_volume', models.FloatField(blank=True, null=True)),
                ('mean_river_outflow', models.FloatField(blank=True, null=True)),
                ('catchment_area', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('field_ph', models.FloatField(blank=True, null=True)),
                ('field_conductivity', models.FloatField(blank=True, null=True)),
                ('light_attenuation_coefficient', models.FloatField(blank=True, null=True)),
                ('secchi_disk_depth', models.FloatField(blank=True, null=True)),
                ('euphotic_layer', models.FloatField(blank=True, null=True)),
                ('oxygen_concentration', models.FloatField(blank=True, null=True)),
                ('oxygen_percentage', models.FloatField(blank=True, null=True)),
                ('laboratory_ph', models.FloatField(blank=True, null=True)),
                ('laboratory_conductivity', models.FloatField(blank=True, null=True)),
                ('total_alkalinity', models.FloatField(blank=True, null=True)),
                ('bicarbonates', models.FloatField(blank=True, null=True)),
                ('nitrate_nitrogen', models.FloatField(blank=True, null=True)),
                ('sulphates', models.FloatField(blank=True, null=True)),
                ('chloride', models.FloatField(blank=True, null=True)),
                ('calcium', models.FloatField(blank=True, null=True)),
                ('magnesium', models.FloatField(blank=True, null=True)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('ammonium', models.FloatField(blank=True, null=True)),
                ('total_nitrogen', models.FloatField(blank=True, null=True)),
                ('soluble_reactive_phosphorus', models.FloatField(blank=True, null=True)),
                ('total_phosphorus', models.FloatField(blank=True, null=True)),
                ('reactive_silica', models.FloatField(blank=True, null=True)),
                ('dry_weight', models.FloatField(blank=True, null=True)),
                ('chlorophyll_a', models.FloatField(blank=True, null=True)),
                ('dna_extraction_date', models.DateTimeField(blank=True, null=True)),
                ('dna_quantity', models.FloatField(blank=True, null=True)),
                ('dna_quality_a260_280', models.FloatField(blank=True, null=True)),
                ('dna_quality_a260_230', models.FloatField(blank=True, null=True)),
                ('vertical_temperature_profiles', models.BinaryField()),
                ('phytoplankton_countings', models.BinaryField()),
                ('cyanotoxin_samples', models.BinaryField()),
                ('biological_element', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.BiologicalElement')),
                ('depth_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.DepthType')),
                ('dna_extraction_kit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.DNAExtractionKit')),
                ('edna_marker', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.EDNAMarker')),
                ('mixing_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.MixingType')),
            ],
        ),
        migrations.CreateModel(
            name='SamplingMatrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SamplingStrategy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('pp_code', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('discrete', 'D'), ('multiple', 'M')], default='discrete', max_length=8)),
                ('drainage_basin', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.DrainageBasin')),
            ],
        ),
        migrations.CreateModel(
            name='TrackingComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.Sample')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='sample',
            name='sampling_matrix',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.SamplingMatrix'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sampling_strategy',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.SamplingStrategy'),
        ),
        migrations.AddField(
            model_name='sample',
            name='station',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.Station'),
        ),
        migrations.AddField(
            model_name='sample',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='geographicalpoint',
            name='station',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.Station'),
        ),
        migrations.AddField(
            model_name='ftpsampledirectory',
            name='sample',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.Sample'),
        ),
        migrations.AddField(
            model_name='comment',
            name='sample',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.Sample'),
        ),
        migrations.AddField(
            model_name='biologicalelement',
            name='edna_marker',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='EcoAlpsWater.EDNAMarker'),
        ),
        migrations.AlterUniqueTogether(
            name='station',
            unique_together={('name', 'drainage_basin')},
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together={('sample', 'field_name')},
        ),
    ]
